// <auto-generated />
using System;
using EnglishSpeakingCoach.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnglishSpeakingCoach.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailedAnalysis")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RecordingId")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("Suggestion")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("WordPosition")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecordingId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Conversation",
                            Content = "Hello, Hi, Good morning, Good afternoon, Good evening, How are you?",
                            CreatedAt = new DateTime(2025, 9, 30, 15, 9, 10, 294, DateTimeKind.Utc).AddTicks(7586),
                            Description = "Learn common English greetings and introductions",
                            DurationMinutes = 10,
                            IsActive = true,
                            Level = "Beginner",
                            OrderIndex = 1,
                            Title = "Basic Greetings"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Pronunciation",
                            Content = "Think, Thank, The, This, That, Those, These",
                            CreatedAt = new DateTime(2025, 9, 30, 15, 9, 10, 294, DateTimeKind.Utc).AddTicks(8165),
                            Description = "Practice the 'th' sound in English",
                            DurationMinutes = 15,
                            IsActive = true,
                            Level = "Beginner",
                            OrderIndex = 2,
                            Title = "Pronunciation: TH Sounds"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Conversation",
                            Content = "Nice to meet you, Let me introduce myself, I'd like to discuss, Could you please",
                            CreatedAt = new DateTime(2025, 9, 30, 15, 9, 10, 294, DateTimeKind.Utc).AddTicks(8168),
                            Description = "Essential phrases for business conversations",
                            DurationMinutes = 20,
                            IsActive = true,
                            Level = "Intermediate",
                            OrderIndex = 3,
                            Title = "Business English Basics"
                        });
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.ProgressMetrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageAccuracyScore")
                        .HasColumnType("float");

                    b.Property<double>("AverageFluencyScore")
                        .HasColumnType("float");

                    b.Property<double>("AveragePronunciationScore")
                        .HasColumnType("float");

                    b.Property<int>("CompletedLessons")
                        .HasColumnType("int");

                    b.Property<DateTime>("MetricDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("OverallScore")
                        .HasColumnType("float");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalMinutesPracticed")
                        .HasColumnType("int");

                    b.Property<int>("TotalRecordings")
                        .HasColumnType("int");

                    b.Property<int>("TotalSessions")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "MetricDate", "Period");

                    b.ToTable("ProgressMetrics");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.Recording", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AccuracyScore")
                        .HasColumnType("float");

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<double?>("FluencyScore")
                        .HasColumnType("float");

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessingStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("PronunciationScore")
                        .HasColumnType("float");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Transcript")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Recordings");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("EnglishSpeakingCoach.Domain.Entities.Recording", "Recording")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RecordingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recording");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.ProgressMetrics", b =>
                {
                    b.HasOne("EnglishSpeakingCoach.Domain.Entities.User", "User")
                        .WithMany("ProgressMetrics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.Recording", b =>
                {
                    b.HasOne("EnglishSpeakingCoach.Domain.Entities.Session", "Session")
                        .WithMany("Recordings")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.Session", b =>
                {
                    b.HasOne("EnglishSpeakingCoach.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Sessions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EnglishSpeakingCoach.Domain.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.Recording", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.Session", b =>
                {
                    b.Navigation("Recordings");
                });

            modelBuilder.Entity("EnglishSpeakingCoach.Domain.Entities.User", b =>
                {
                    b.Navigation("ProgressMetrics");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
